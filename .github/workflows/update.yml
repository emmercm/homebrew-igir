# Requires repo secret: PERSONAL_ACCESS_TOKEN with permissions:
#   Contents: read and write
#   Pull Requests: read and write

name: Update Formula

on:
  schedule:
    # Every hour
    - cron: '0 * * * *'
  workflow_dispatch:
  # DEBUG
  push:

jobs:
  update:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      # Update the formula and commit to the default branch
      - id: update-and-commit
        run: |
          set -x
          PACKAGE_JSON=$(curl -L --fail-with-body --silent "https://registry.npmjs.org/igir/latest")

          echo "${PACKAGE_JSON}" | jq --raw-output '.description'
          echo "${PACKAGE_JSON}" | jq --raw-output '.description' | sed 's/[^\x00-\x7F]//g'
          echo "${PACKAGE_JSON}" | jq --raw-output '.description' | sed 's/[^\x00-\x7F]//g' | sed 's/^\s*//'
          echo "${PACKAGE_JSON}" | jq --raw-output '.description' | sed 's/[^\x00-\x7F]//g' | sed 's/^\s*//' | head -c 80
          PACKAGE_DESCRIPTION=$(echo "${PACKAGE_JSON}" | jq --raw-output '.description' | sed 's/[^\x00-\x7F]//g' | sed 's/^\s*//' | head -c 80)
          sed -i "s/desc \".*\"/desc \"${PACKAGE_DESCRIPTION}\"/" Formula/igir.rb

          PACKAGE_HOMEPAGE=$(echo "${PACKAGE_JSON}" | jq --raw-output '.homepage')
          sed -i "s@homepage \".*\"@homepage \"${PACKAGE_HOMEPAGE}\"@" Formula/igir.rb

          PACKAGE_TARBALL=$(echo "${PACKAGE_JSON}" | jq --raw-output '.dist.tarball')
          sed -i "s@url \".*\"@url \"${PACKAGE_TARBALL}\"@" Formula/igir.rb

          TARBALL_SHA256=$(curl -L --fail-with-body --silent --output - "${PACKAGE_TARBALL}" | sha256sum | awk '{print $1}')
          sed -i "s/sha256 \".*\"/sha256 \"${TARBALL_SHA256}\"/" Formula/igir.rb

          PACKAGE_LICENSE=$(echo "${PACKAGE_JSON}" | jq --raw-output '.license')
          sed -i "s/license \".*\"/license \"${PACKAGE_LICENSE}\"/" Formula/igir.rb

          brew style --fix Formula/igir.rb
          cat Formula/igir.rb
          git add --all

          USER_EMAIL="${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
          echo "USER_EMAIL=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"
          git config --global user.email "${USER_EMAIL}"

          USER_NAME="$(gh api "/users/${GITHUB_ACTOR}" | jq .name -r)"
          echo "USER_NAME=${USER_NAME}" >> "${GITHUB_OUTPUT}"
          git config --global user.name "${USER_NAME}"

          PACKAGE_VERSION=$(npm show igir --json | jq --raw-output '.version')
          git commit -m "v${PACKAGE_VERSION}" || exit 0
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> "${GITHUB_OUTPUT}"

          # DEBUG
          exit 1
        env:
          GH_TOKEN: ${{ github.token }}
      
      - if: ${{ steps.update-and-commit.outputs.PACKAGE_VERSION }}
        id: test
        run: |
          brew install --build-from-source "$(pwd)/Formula/igir.rb"
          igir --help
      
      # Create the pull request, and mark it as auto-merge
      - if: ${{ steps.update-and-commit.outputs.PACKAGE_VERSION }}
        id: create-pull-request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          author: ${{ steps.update-and-commit.outputs.USER_NAME }} <${{ steps.update-and-commit.outputs.USER_EMAIL }}>
          branch: ${{ github.actor }}/${{ steps.update-and-commit.outputs.PACKAGE_VERSION }}
          delete-branch: true
          title: v${{ steps.update-and-commit.outputs.PACKAGE_VERSION }}
      - if: ${{ steps.create-pull-request.outputs.pull-request-number }}
        run: |
          {
            echo "# v${{ steps.update-and-commit.outputs.PACKAGE_VERSION }}"
            echo ""
            echo "${{ steps.create-pull-request.outputs.pull-request-url }}"
          } >> "${GITHUB_STEP_SUMMARY}"
      - if: ${{ steps.create-pull-request.outputs.pull-request-number }}
        run: gh pr merge "${{ steps.create-pull-request.outputs.pull-request-number }}" --squash --auto
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
